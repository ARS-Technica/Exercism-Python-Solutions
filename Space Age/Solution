# https://exercism.org/tracks/python/exercises/space-age/solutions/ARS-Technica


class SpaceAge:
    periods = {'earth': 1.0, 
               'mercury': 0.2408467, 
               'venus': 0.61519726,
               'mars': 1.8808158,
               'jupiter': 11.862615,
               'saturn': 29.447498,
               'uranus': 84.016846,
               'neptune': 164.79132}

    def __init__(self, seconds):
        self.seconds = seconds
        self.earth_years = seconds / 31557600
        # Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds

    def on_earth(self):
        return round(self.earth_years, 2)

    def on_mercury(self):
        return round(self.earth_years / self.periods['mercury'], 2)

    def on_venus(self):
        return round(self.earth_years / self.periods['venus'], 2)

    def on_mars(self):
        return round(self.earth_years / self.periods['mars'], 2)

    def on_jupiter(self):
        return round(self.earth_years / self.periods['jupiter'], 2)

    def on_saturn(self):
        return round(self.earth_years / self.periods['saturn'], 2)

    def on_uranus(self):
        return round(self.earth_years / self.periods['uranus'], 2)

    def on_neptune(self):
        return round(self.earth_years / self.periods['neptune'], 2)


if __name__ == '__main__':
    print(SpaceAge(1000000000).on_earth())         # 31.69
    print(SpaceAge(2134835688).on_mercury())       # 280.88    
    print(SpaceAge(189839836).on_venus())          # 9.78
    print(SpaceAge(2129871239).on_mars())          # 35.88
    print(SpaceAge(901876382).on_jupiter())        # 2.41
    print(SpaceAge(2000000000).on_saturn())        # 2.15
    print(SpaceAge(1210123456).on_uranus())        # 0.46
    print(SpaceAge(1821023456).on_neptune())       # 0.35

