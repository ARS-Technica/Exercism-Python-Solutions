# Not Mine
# https://exercism.org/tracks/python/exercises/say/solutions/ysf


one_step = 'zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen nineteen'.split()
ten_step = 'zero ten twenty thirty forty fifty sixty seventy eighty ninety'.split()
cases = [  
    (  20,          1, one_step,          '',  ''),
    ( 1e2,         10, ten_step,          '', '-'),
    ( 1e3,        100, one_step,  ' hundred', ' '),
    ( 1e6,       1000, one_step, ' thousand', ' '),
    ( 1e9,    1000000, one_step,  ' million', ' '),
    (1e12, 1000000000, one_step,  ' billion', ' ')    
]

def say(number):
    if not (0 <= number < 1e12):
        raise ValueError("input out of range")
    for condition, divider, lookup, txt, hyphen in cases:
        if number < condition:
            q, r = divmod(number, divider)
            return (lookup[q] if divider < 1e3 else say(q)) + txt + (hyphen + say(r) if r else '')


#%%

# Not Mine
# https://exercism.org/tracks/python/exercises/say/solutions/ysf


ones = lambda x: 'zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen nineteen'.split()[x]
tens = lambda x: 'zero ten twenty thirty forty fifty sixty seventy eighty ninety'.split()[x]
_say = lambda x: say(x)
cases = [  
    (  20,          1, ones, '',  ''),
    ( 1e2,         10, tens, '', '-'),
    ( 1e3,        100, ones, ' hundred', ' '),
    ( 1e6,       1000, _say, ' thousand', ' '),
    ( 1e9,    1000000, _say, ' million', ' '),
    (1e12, 1000000000, _say, ' billion', ' ')    
]

def say(number):
    v = lambda f, q, r, t, h: f(q) + t
    w = lambda f, q, r, t, h: f(q) + t + h + say(r)
 
    if (0 <= number < 1e12): 
        for condition, divider, func, txt, hyphen in cases:
            if number < condition:
                q, r = divmod(number, divider)                                     
                return {0: v}.get(r, w)(func, q, r, txt, hyphen)
                
    raise ValueError("input out of range")


#%%

# Not Mine
# https://exercism.org/tracks/python/exercises/say/solutions/ysf


_say = lambda x: say(x)
ones = lambda x: 'zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen nineteen'.split()[x]
tens = lambda x: 'zero ten twenty thirty forty fifty sixty seventy eighty ninety'.split()[x]
done = lambda f, q, r, t, h: f(q) + t
nope = lambda f, q, r, t, h: f(q) + t + h + say(r)
def say(n):
    if not (0 <= n < 1e12): 
        raise ValueError("input out of range")    
    condition, d, func, txt, hyphen = list(filter(lambda x: x[0],
        [( n <  20,           1, ones, '',           ''),
         ( n < 1e2,          10, tens, '',          '-'),
         ( n < 1e3,         100, ones, ' hundred',  ' '),
         ( n < 1e6,        1000, _say, ' thousand', ' '),
         ( n < 1e9,     1000000, _say, ' million',  ' '),
         ( n < 1e12, 1000000000, _say, ' billion',  ' ')]))[0]
    q, r = divmod(n, d)                                     
    return {0: done}.get(r, nope)(func, q, r, txt, hyphen)

