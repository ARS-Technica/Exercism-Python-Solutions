# https://exercism.org/tracks/python/exercises/palindrome-products/solutions/ARS-Technica

def largest(min_factor, max_factor):
    """Given a range of numbers, find the largest palindromes which
       are products of two numbers within that range.

    :param min_factor: int with a default value of 0
    :param max_factor: int
    :return: tuple of (palindrome, iterable).
             Iterable should contain both factors of the palindrome in an arbitrary order.
    """
    # if the max_factor is less than the min_factor
    if max_factor < min_factor: raise ValueError("min must be <= max")    
    
    res = (None, [],)

    for i in range(max_factor, min_factor-1, -1):
        for j in range(i, min_factor-1, -1):
            product = (i * j)
            if str(product) == str(product)[::-1]:
                if not res[0] or res[0] < product:
                    res = product, [[i,j]]
                elif res[0] == product:
                    res[1].append([i,j])
                break

    return res

def smallest(min_factor, max_factor):
    """Given a range of numbers, find the smallest palindromes which
    are products of two numbers within that range.

    :param min_factor: int with a default value of 0
    :param max_factor: int
    :return: tuple of (palindrome, iterable).
    Iterable should contain both factors of the palindrome in an arbitrary order.
    """
    if max_factor < min_factor: raise ValueError("min must be <= max") 

    res = ""

    for i in range(min_factor,max_factor + 1):
        for j in range(i, max_factor+1):
            product = (i * j)
            if str(product) == str(product)[::-1] and res == "":
                res = product
                factors = [[i,j]]
                return res, factors

    return (None, [])


if __name__ == '__main__':
    
    print(largest(1, 9))                    # (9, [[1, 9], [3, 3]])
    print(largest(10, 99))                  # (9009, (91, 99))
    print(smallest(10, 99))                 # (121, (11, 11))    
    
    print(smallest(min_factor=1, max_factor=9))             #1 [[1, 1]])
    print(largest(min_factor=1, max_factor=9))              #9 [[1, 9], [3, 3]])
    print(smallest(min_factor=10, max_factor=99))           #121 [[11, 11]])
    print(largest(min_factor=10, max_factor=99))            #9009 [[91, 99]])
    print(smallest(min_factor=100, max_factor=999))         #10201 [[101, 101]])
    print(largest(min_factor=100, max_factor=999))          #906609 [[913, 993]])
    print(smallest(min_factor=1000, max_factor=9999))       #1002001 [[1001, 1001]])
    print(largest(min_factor=1000, max_factor=9999))        #99000099 [[9901, 9999]])
    print(smallest(min_factor=1002, max_factor=1003))       #None(value) 
    print(largest(min_factor=15, max_factor=15))            #None(value) 
    print(smallest(min_factor=10000, max_factor=1))         #ValueError
