# https://exercism.org/tracks/python/exercises/phone-number/solutions/ARS-Technica

class PhoneNumber:
    def __init__(self, number):
        for i in number:
            if i.isalpha():
                raise ValueError("letters not permitted")
            if i in '@:!?&^%$':
                raise ValueError("punctuations not permitted")

        number = ''.join([i for i in number if i.isnumeric()])

        # if a phone number has less than 10 digits.
        if len(number) < 10: raise ValueError("incorrect number of digits")
        # if a phone number has more than 11 digits.
        if len(number) > 11: raise ValueError("more than 11 digits")
        # if a phone number has 11 digits, but starts with a number other than 1.
        if len(number) == 11 and number[0] != '1': raise ValueError("11 digits must start with 1")

        excess = len(number) - 10
        self.number = number[excess:] 

        # if a phone number has an exchange code that starts with 0.
        if self.number[3] == '0': raise ValueError("exchange code cannot start with zero") 
        # if a phone number has an exchange code that starts with 1.
        if self.number[3] == '1': raise ValueError("exchange code cannot start with one") 
        # if a phone number has an area code that starts with 0.
        if self.number[0] == '0': raise ValueError("area code cannot start with zero") 
        # if a phone number has an area code that starts with 1.
        if self.number[0] == '1': raise ValueError("area code cannot start with one")

        self.area_code = self.number[0:3]
        self.exchange_code = self.number[3:6]
        self.local_number = self.number[6:]

    def pretty(self):
        return f"({self.area_code})-{self.exchange_code}-{self.local_number}"


if __name__ == '__main__':
    print(PhoneNumber("(223) 456-7890").number)                #"2234567890")
    print(PhoneNumber("223.456.7890").number)                  #"2234567890")
    print(PhoneNumber("223 456   7890   ").number)             #"2234567890")
    print(PhoneNumber("+1 (223) 456-7890").number)             #"2234567890")

