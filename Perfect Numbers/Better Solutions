# https://exercism.org/tracks/python/exercises/perfect-numbers/solutions/aloliveira

# Break the two jobs of this program into seperate functions 

def classify(number):
    """ A perfect number equals the sum of its positive divisors.
 
    :param number: int a positive integer
    :return: str the classification of the input integer
    """

    if not (isinstance(number, int) and number > 0):
        raise ValueError("Classification is only possible for positive integers.")
    aliquot_sum = sum(get_factors(number))

    if aliquot_sum == number:
        return "perfect"
    elif aliquot_sum > number:
        return "abundant"
    else:
        return "deficient"

def get_factors(number):
    factors = []

    for i in range(1, number):
        if number % i == 0:
            factors.append(i)
    print(factors)
    return factors

#%%

# https://exercism.org/tracks/python/exercises/perfect-numbers/solutions/skowalew

# Break the two jobs of this program into seperate functions 
# But also remember that you don't need to search past the square root of a number for it's factors

import math

def classify(number):
    """ A perfect number equals the sum of its positive divisors.
 
    :param number: int a positive integer
    :return: str the classification of the input integer
    """

    if number < 1:
        raise ValueError("Classification is only possible for positive integers.")
    if number == 1:
        return "deficient"

    aliquot_sum = sum(get_factors(number))

    if aliquot_sum == number:
        return "perfect"
    if aliquot_sum > number:
        return "abundant"

    return "deficient"

def get_factors(number):
    """
    Return a factors of a number not including the number itself.
 
    :param number: int a positive integer.
    :return: list factors of a number not including the number itself.
    """

    factors = [1]

    for i in range(2, round(math.sqrt(number)) + 1):
        if number % i == 0:
            factors.append(i)
            if i != number // i:
                factors.append(number // i)
    return factors

#%%
