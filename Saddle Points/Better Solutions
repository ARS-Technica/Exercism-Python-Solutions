# https://exercism.org/tracks/python/exercises/saddle-points/solutions/yingtao

def saddle_points(matrix):
    if not all([len(row) == len(matrix[0]) for row in matrix]):
        raise ValueError('irregular matrix')

    row_max = [max(row) for row in matrix]
    col_min = [min(col) for col in zip(*matrix)]

    result = []

    for m, row in enumerate(matrix):
        for n, value in enumerate(row):
            if value == row_max[m] and value == col_min[n]:
                result.append({'row': m + 1, 'column': n + 1})

    return result


#%%


def saddle_points(matrix):
    if any(len(matrix[0]) != len(r) for r in matrix):
        raise ValueError("irregular matrix")

    points = []

    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == max(matrix[i]) and matrix[i][j] == min([row[j] for row in matrix]):
                points.append({"row": i + 1, "column": j + 1})

    return points


#%%

# https://exercism.org/tracks/python/exercises/saddle-points/solutions/rick-peterson

def saddle_points(matrix):
    res = []
    if len(matrix) != 0:   
        try:
            matrix_trans = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
        except IndexError:
            raise ValueError("irregular matrix") 
        for num, i in enumerate(matrix):
            for enum, k in enumerate(matrix_trans,1):
                if k[num] == max(i) and k[num] == min(k):
                    res.append({"row": num+1,"column":enum })
    return(res) 


#%%


  
